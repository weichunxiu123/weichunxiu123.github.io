{"pages":[{"title":"Categories","date":"2023-06-07T07:39:09.527Z","path":"categories/index.html","text":""},{"title":"About","date":"2023-06-07T07:39:32.176Z","path":"about/index.html","text":""},{"title":"Tags","date":"2023-06-07T07:39:23.892Z","path":"tags/index.html","text":""}],"posts":[{"title":"Spark-pyspark基础编码环境","date":"2023-06-08T03:05:04.000Z","path":"wiki/Spark-pyspark基础编码环境/","text":"Spark（pyspark基础编码环境）（一）、pyspark环境配置安装。 PySpark是Spark官方提供的一个Python类库，内置了Spark API，可以通过PySpark类库来编写Spark程序，并提交到Spark集群中运行。 1234前情提示：（1）将课程资料中提供的的hadoop-3.3.0文件，复制到某个盘符下（中文的且无空格的）。（2）将文件夹内bin内的Hadoop.dll复制到C:\\Windows\\Systmctl32里面去。（3）在系统环境变量中配置HADOOP_HOME，指向hadoop-3.3.0文件夹的路径。 （二）本机PySpark环境配置 在前面部署Spark的时候，已经在Linux系统上部署了acaconda的Python环境，详见Spark的Stand Alone模式部署章节。故本次在Windows上安装anaconda，并配置PySpark库。具体安装步骤如下： （1）在课程资料中选择anaconda应用程序双击安装。 （2）一直选择Next，进行安装。 注意：选择第一个，将anaconda添加至我的环境变量中！ （3）安装结束后会出现anaconda3文件夹。打开Anaconda Prompt(anaconda),会出现base，即为安装成功。 （4）配置国内源，加速网络下载。 1、在Anaconda Prompt(anaconda)中执行 1conda config --set show_channel_urls yes 2、将如下内容替换到C:\\Users\\用户名.condarc文件中。 1234567891011channels: \\- defaultsshow_channel_urls: truedefault_channels: \\- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main \\- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r \\- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud （5）创建虚拟环境 1、创建虚拟环境 pyspark, 基于Python 3.8 1conda create -n pyspark python=3.8 2、切换到虚拟环境内 1conda activate pyspark 3、在虚拟环境内安装包 1pip install pyhive pyspark jieba -i [https://pypi.tuna.tsinghua.edu.cn/](https://pypi.tuna.tsinghua.edu.cn/simple)simple 安装成功示例： （三）PyCharm中配置Python解释器 （1）配置本地解释器：创建Python项目，选择conda虚拟环境PySpark中的Python.exe解释器。 （2）配置远程SSH Linux解释器 1、远程SSH python pyspark环境 2、添加新的远程连接 3、设置虚拟的python环境路径 （四）WordCount应用实战 可以选择在本地的PySpark环境中执行spark代码，也可以选择在虚拟机环境PySpark中执行。选择本地的就是使用conda环境，应用其中的PySpark环境执行，来读取本地文件，完成单词计数的实例。选择远程虚拟机中的PySpark环境，需要SSH连接到服务器（这里需要安装Pycharm专业版），注意：无论是选择那种方案，都是在PyCharm软件中去执行，完成上述过程。 （1）WordCount代码本地执行 准备pyspark代码以及本地文件words.txt，在PyCharm中执行。 1234567891011121314151617181920212223# coding:utf8from pyspark import SparkConf, SparkContext\\# import osimport osos.environ[&#x27;PYSPARK_PYTHON&#x27;]=&#x27;D:\\\\anaconda3\\\\envs\\\\pyspark\\\\python.exe&#x27;os.environ [&#x27;JAVA_HOME&#x27;] = &#x27;D:\\\\Java\\\\jdk1.8.0_241&#x27;\\#os.environ[&#x27;PYSPARK_PYTHON&#x27;]=&#x27;/export/server/anaconda3/envs/pyspark/bin/python3.8&#x27;if __name__ == &#x27;__main__&#x27;: conf = SparkConf().setAppName(&quot;WordCountHelloWorld&quot;).setMaster(&quot;local[*]&quot;) # 通过SparkConf对象构建SparkContext对象 sc = SparkContext(conf=conf) # 需求 : wordcount单词计数, 读取HDFS上的words.txt文件, 对其内部的单词统计出现 的数量 # 读取文件 #file_rdd = sc.textFile(&quot;hdfs://node1:8020/input/words.txt&quot;) #file_rdd = sc.textFile(&quot;file:///tmp/pycharm_project_621/data/words.txt&quot;) file_rdd = sc.textFile(&quot;D:\\\\数据挖掘与分析实验报告合集\\\\pyspark\\\\data\\\\input\\\\words.txt&quot;) # 将单词进行切割, 得到一个存储全部单词的集合对象 words_rdd = file_rdd.flatMap(lambda line: line.split(&quot; &quot;)) # 将单词转换为元组对象, key是单词, value是数字1 words_with_one_rdd = words_rdd.map(lambda x: (x, 1)) # 将元组的value 按照key来分组, 对所有的value执行聚合操作(相加) result_rdd = words_with_one_rdd.reduceByKey(lambda a, b: a + b) # 通过collect方法收集RDD的数据打印输出结果print(result_rdd.collect()) 运行结果截图： （2）WordCount代码远程服务器上执行。 通过SSH连接到远程服务器上，详见上述操作。 1完成与服务器连接后，会在服务器中的/tmp文件夹下新建了pycharm_project_xxx文件夹用于放置本地的同步代码。 （3）读取HDFS上的文件 1、将读取文件路径改为hdfs上的&#x2F;input&#x2F;words.txt 2、在hdfs上新建&#x2F;input文件夹，使用命令 1hadoop fs -mkdir /input 3、上传words.txt到hdfs中，使用命令 1hadoop fs -put words.txt /input/ 4、在pycharm中执行spark代码 （五）spark-submit作业提交 （1）local本地模式 首先将helloword.py程序放到&#x2F;root&#x2F;目录下，使用命令完成提交作业。 1bin/spark-submit --master local[*] /root/helloworld.py （2）spark on yarn模式 使用命令完成提交作业。 1bin/spark-submit --master yarn /root/helloworld.py （3）使用历史服务器查看任务执行情况 1node1:18080 参考资料 [1]spark环境部署.md [2]1-saprk基础入门.pdf [3]spark1.pptx","tags":[],"categories":[]},{"title":"spark-YARN模式部署","date":"2023-06-08T02:48:27.000Z","path":"wiki/spark-YARN模式部署/","text":"spark（YARN模式）（1）Client模式中driver运行在客户端，在客户端显示输出结果，但是在spark历史服务器不显示logs信息。 （2）Cluster模式中driver运行在YARN容器内部，和ApplicationMaster在同一个容器内，在客户端不显示输出结果，所以在spark历史服务器中显示logs的信息。 （3）client模式测试 1bin/spark-submit --master yarn --deploy-mode client --driver-memory 512m $&#123;SPARK_HOME&#125;/examples/src/main/python/pi.py 10 （4） cluster模式测试 1bin/spark-submit --master yarn --deploy-mode cluster --driver-memory 512m \\--conf &quot;spark.pyspark.driver.python=/export/server/anaconda3 12/bin/python3&quot; \\--conf &quot;spark.pyspark.python=/export/server/anaconda3/bin/python3&quot; $&#123;SPARK_HOME&#125;/examples/src/main/python/pi.py 10 参考资料 [1]spark环境部署 [2]spark1.pptx","tags":[],"categories":[]},{"title":"spark-HA环境部署","date":"2023-06-08T02:34:22.000Z","path":"wiki/spark-HA环境部署/","text":"spark（HA环境部署）（1）首先进入spark-env.sh中， 1vim /export/server/spark/conf/spark-env.sh （2）在spark-env.sh配置文件中删除 1export SPARK_MASTER_HOST=node1 （目的是不让机器知道固定的master是谁，不然无法进行master切换） （3）在spark-env.sh配置文件中增加以下内容： 1SPARK_DAEMON_JAVA_OPTS=&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir=/spark-ha&quot; # spark.deploy.recoveryMode 指定HA模式 基于Zookeeper实现 # 指定Zookeeper的连接地址 # 指定在Zookeeper中注册临时节点的路径 （4）将spark-env.sh配置文件分发给node2、node3。 12scp -r /export/server/spark/conf/spark-env.sh node2:/export/server/spark/conf/scp -r /export/server/spark/conf/spark-env.sh node3:/export/server/spark/conf/ （5）启动StandAlone集群、zookeeper集群： 1）在node1上： 1sbin/start-all.sh 2）在node2上： 1sbin/start-master.sh （目的是：备用master，当kill掉node1的master后，程序依然能进行） （6）查看node1、node2的WEB UI （如果8080端口被占用了，可以顺延到8081、8082端口，其中node1上的master是alive的，node2上的是standby） 12node1:8080--&gt;8081 node2:8080--&gt;8081\\8082 （6）Master主备切换，在&#x2F;export&#x2F;server&#x2F;spark路径下提交一个任务到当前alive master上: 1bin/spark-submit --master spark://node1:7077 /export/server/spark/examples/src/main/python/pi.py 1000 （在提交成功后, 将alive master直接kill掉，系统不会中断，仍然能正常运行结果） （7）查看Master的WEB UI，只有node2是alive的，证明master切换成功 参考资料 [1]spark环境部署.md [2]1-spark基础环境配置.pdf","tags":[],"categories":[]},{"title":"Spark-standalone环境部署","date":"2023-06-08T01:56:46.000Z","path":"wiki/Spark-standalone环境部署/","text":"spark（StandAlone环境部署）（一）、集群规划：选择三台机器分别为node1、node2、node3来组成集群环境。 其中node1上安装master和worker进程；node2上安装worker进程；node3上安装worker进程。 （二）、anaconda on linux安装过程： （1）前提：在linux服务器node1、node2、node3上都安装python(anaconda)。并安装pyspark虚拟环境。具体安装步骤如下。 1、在&#x2F;export&#x2F;server&#x2F;目录下上传anaconda的安装包Anaconda3-2021.05-Linux-x86_64.sh。 2、安装anaconda 使用命令： 1sh ./Anaconda3-2021.05-Linux-x86_64.sh 3、安装完毕之后若没有出现base环境，进行如下配置。在&#x2F;root&#x2F;.condarc添加国内源 安装完毕后，关闭服务器重新启动，出现base环境即安装成功。 （2）在anaconda中，安装pyspark虚拟环境。 1、基于python3.8安装pyspark环境。 2、切换到pyspark中，并安装所需要的安装包。 注：在node1、node2、node3三台服务器上都完成配置！ （三）、StandAlone模式部署 （1）安装spark压缩文件。 1、进入到&#x2F;export&#x2F;server&#x2F;中上传并解压spark-3.2.0-bin-hadoop3.2.tgz。并设置软链接，命令为 1ln-s/export/server/spark-3.2.0-bin-hadoop3.2 /export/server/spark。 （2）在&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf，配置文件。 1、首先在配置workers文件。 12mv workers.template workersvim workers 2.配置spark-env.sh文件。mv spark-env.sh.template spark-env.sh； Vim spark-env.sh，添加如下内容。 1234567891011121314151617181920212223## 设置JAVA安装目录JAVA_HOME=/export/server/jdk\\## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoopYARN_CONF_DIR=/export/server/hadoop/etc/hadoop\\## 指定spark老大Master的IP和提交任务的通信端口\\# 告知Spark的master运行在哪个机器上export SPARK_MASTER_HOST=node1\\# 告知sparkmaster的通讯端口export SPARK_MASTER_PORT=7077\\# 告知spark master的 webui端口SPARK_MASTER_WEBUI_PORT=8080\\# worker cpu可用核数SPARK_WORKER_CORES=1\\# worker可用内存SPARK_WORKER_MEMORY=1g\\# worker的工作通讯地址SPARK_WORKER_PORT=7078\\# worker的 webui地址SPARK_WORKER_WEBUI_PORT=8081\\## 设置历史服务器\\# 配置的意思是 将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中SPARK_HISTORY_OPTS=&quot;-Dspark.history.fs.logDirectory=hdfs://node1:8020/sparklog/ -Dspark.history.fs.cleaner.enabled=true&quot; 3、在HDFS上创建程序运行历史记录存放的文件夹。 1hadoop fs -mkdir /sparklog；hadoop fs -chmod 777 /sparklog 4、配置spark-defaults.conf文件。 12mv spark-defaults.conf.template spark-defaults.confvim spark-defaults.conf 添加如下内容。 5、配置log4j.properties 文件[可选配置]。 1mv log4j.properties.template log4j.properties 修改配置，设置级别为WARN 只输出警告和错误日志。 （四）、将spark分发到node2和node3服务器上。注意同时要设置软链接。 123scp -r spark-3.1.2-bin-hadoop3.2 node2:/export/server/scp -r spark-3.1.2-bin-hadoop3.2 node3:/export/server/ln -s /export/server/spark-3.1.2-bin-hadoop3.2 /export/server/spark 注意：配置&#x2F;etc&#x2F;profile，JAVA_HOME；SPARK_HOME；PYSPARK_PYTHON都指向正确的目录。 （五）、启动历史服务器，启动Spark的Master和Worker进程 12（1）启动历史服务器：sbin/start-history-server.sh（2）启动全部的master和worker：sbin/start-all.Sh （六）、查看Master的WEB UI 在浏览器中输入node1:8080 （七）、连接到StandAlone集群 （1）通过master来连接到StandAlone集群。 1bin/pyspark --master spark://node1:7077 （2）使用spark-shell连接StandAlone集群。 1bin/spark-shell –master spark://node1:7077 进行测试。 （3）使用spark-submit(PI)提交任务到集群上执行。 1bin/spark-submit –master spark://node1:7077/export/server/spark/examples/src/main/Python/pi.py 10 1查看历史服务器：在浏览器中输入node1：18080 参考资料 [1]spark(standalone部署文档) [2]1-spark基础入门.pdf","tags":[],"categories":[]},{"title":"Spark--local模式配置","date":"2023-06-07T11:38:25.000Z","path":"wiki/Spark-local模式配置/","text":"spark（local环境部署）（1）安装Anaconda 上传安装包 1sh ./Anaconda3-2021.05-Linux-x86_64.sh 出现（base)即为安装成功 （2）创建虚拟环境 12345conda create -n pyspark python=3.8conda activate pysparkpip install pyhive pyspark jieba -i [https://pypi.tuna.tsinghua.edu.cn](https://pypi.tuna.tsinghua.edu.cn/simple)/simple （1）修改环境变量配置Spark由如下5个环境变量需要设置 SPARK_HOME: 表示Spark安装路径在哪里 PYSPARK_PYTHON: 表示Spark想运行Python程序, 那么去哪里找python执行器。 JAVA_HOME: 告知Spark Java在哪里 HADOOP_CONF_DIR: 告知Spark Hadoop的配置文件在哪里 HADOOP_HOME: 告知Spark Hadoop安装在哪里 这5个环境变量 都需要配置在: &#x2F;etc&#x2F;profile中！ （4）解压 解压下载的Spark安装包 1tar -zxvf spark-3.2.0-bin-hadoop3.2.tgz -C /export/server/ 设置软连接 1ln -s /export/server/spark-3.2.0-bin-hadoop3.2 /export/server/spark （2）测试 1sc.parallelize([1,2,3,4,5]).map(lambda x: x + 1).collect() bin&#x2F;pyspark在这个环境可以运行spark代码，如图： 在所有机器安装Python(Anaconda)，并在所有机器配置环境变量。 （3）配置配置文件 进入到spark的配置文件目录中, cd $SPARK_HOME&#x2F;conf&#96; 配置workers文件vi workers # 改名, 去掉后面的.template后缀 1mv workers.template workers # 编辑worker文件 1vim workers # 将里面的localhost删除, 追加到workers文件内 123node1node2node3 （4）配置spark-env.sh文件 # 1. 改名 1mv spark-env.sh.template spark-env.sh # 2. 编辑spark-env.sh, 在底部追加如下内容 ## 设置JAVA安装目录 1JAVA_HOME=/export/server/jdk ## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群 123HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoopYARN_CONF_DIR=/export/server/hadoop/etc/hadoop ## 指定spark老大Master的IP和提交任务的通信端口 # 告知Spark的master运行在哪个机器上 1export SPARK_MASTER_HOST=node1 # 告知sparkmaster的通讯端口 1export SPARK_MASTER_PORT=7077 # 告知spark master的 webui端口 1SPARK_MASTER_WEBUI_PORT=8080 # worker cpu可用核数 1SPARK_WORKER_CORES=1 # worker可用内存 1SPARK_WORKER_MEMORY=1g # worker的工作通讯地址 1SPARK_WORKER_PORT=7078 # worker的 webui地址 1SPARK_WORKER_WEBUI_PORT=8081 ## 设置历史服务器 12# 配置的意思是 将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中SPARK_HISTORY_OPTS=&quot;-Dspark.history.fs.logDirectory=hdfs://node1:8020/sparklog/ -Dspark.history.fs.cleaner.enabled=true&quot; 在HDFS上创建程序运行历史记录存放的文件夹: 12hadoop fs -mkdir /sparkloghadoop fs -chmod 777 /sparklog （3）配置spark-defaults.conf文件 12# 1. 改名mv spark-defaults.conf.template spark-defaults.conf 123# 2. 修改内容, 追加如下内容# 开启spark的日期记录功能spark.eventLog.enabled true 12# 设置spark日志记录的路径spark.eventLog.dir hdfs://node1:8020/sparklog/ 12# 设置spark日志是否启动压缩spark.eventLog.compress true （4)配置log4j.properties 文件 [可选配置] mv log4j.properties.template log4j.properties 注意：将Spark安装文件夹 分发到其它的服务器 12345671）scp -r spark-3.1.2-bin-hadoop3.2 node2:/export/server/2）scp -r spark-3.1.2-bin-hadoop3.2 node3:/export/server/3）在node2和node3上 给spark安装目录增加软链接ln -s /export/server/spark-3.2.0-bin-hadoop3.2 /export/server/spark （5）启动历史服务器 1sbin/start-history-server.sh （6）启动Spark的Master和Worker进程 123456sbin/start-all.shsbin/start-master.shsbin/start-worker.shsbin/stop-all.shsbin/stop-master.shsbin/stop-worker.sh 查看Master的WEB UI 连接到StandAlone集群 参考资料 [1]spark部署.md [2]spark 1.pptx","tags":[],"categories":[]},{"title":"Docker安装与基本操作","date":"2023-06-07T10:25:11.000Z","path":"wiki/Docker安装与基本操作/","text":"一、安装docker（1）卸载（可选） 如果之前安装过旧版本的Docker，可以使用下面命令卸载： 1234567891011yum remove docker \\docker-client \\docker-client-latest \\docker-common \\docker-latest \\docker-latest-logrotate \\docker-logrotate \\docker-selinux \\docker-engine-selinux \\docker-engine \\docker-ce （2）yum源配置 1.备份配置文件 1/etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 1wget -O /etc/yum.repos.d/CentOS-Base.repo [http://mirrors.aliyun](http://mirrors.aliyun.com/repo/Centos-7.repo).com/repo/Centos-7.repo 1wget -O /etc/yum.repos.d/epel.repo [http://mirrors.aliyun.com/rep](http://mirrors.aliyun.com/repo/epel-7.repo)o/epel-7.repo 1yum clean all 1yum makecache 1yum install -y bash-completion vim lrzsz wget expect net-tools nc nmap treedos2unix htop iftop iotop unzip telnet sl psmisc nethogs glances bc ntpdate openldap-devel *安装docker* （1）受限需要虚拟机联网，安装yum工具 （2）配置网卡转发 1）docker必须安装在centos7平台，内核版本不低于3.10在centos平台运行docker可能会遇见些告警信息，修改内核配置参数，打开内核转发功能 #写入 2）重新加载内核参数 123modprobe br_netfiltersysctl -p /etc/sysctl.d/docker.conf （3）利用yum进行docker安装 提前配置好yum仓库 1）阿里云自带仓库 1curl -o /etc/yum.repos.d/Centos-7.repo [http://mirrors.aliyun.com/repo/](http://mirrors.aliyun.com/repo/Centos-7.repo)Centos-7.repo 2）阿里云提供的docker专属repo仓库 1curl-o/etc/yum.repos.d/docker-ce.repohttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 3）更新yum缓存 1yum clean all &amp;&amp; yum makecache 4）查看源中可用版本 1yum list docker-ce --showduplicates | sort -r 5）yum安装 1yum install docker-ce -y docker -v 卸载 1yum remove -y docker-ce-xxx （4）配置镜像加速器 用于加速镜像文件下载,选用阿里云镜像站 1mkdir -p /etc/docker 1touch /etc/docker/daemon.json 1）进入文件vim &#x2F;etc&#x2F;docker&#x2F;daemon.json编写以下内容： {“registry-mirrors” : [“","tags":[],"categories":[]},{"title":"Git安装与配置","date":"2023-06-07T09:39:32.000Z","path":"wiki/Git安装与配置/","text":"一、Git安装（1）Git下载 Git下载程序 （2）可视化客户端 中文语言包 （3）初始化仓库 （4）添加文件，提交文件至本地仓库 （5）本地删除与恢复 文件选中删除，可用以下方式还原 （6）创建分支 （7）分支的查看切换 （8）标签的创建 （9）切换与删除 通过右键选中删除 *远程仓库* （1）码云账号注册 填写邮箱发送验证码,然后可以注册账号,主页如下 （2）创建远程仓库 （3）把本地代码推送到远端 生成公钥私钥 ssh-keygen -t rsa 一直回车 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub 密钥配置 参考资料 1","tags":[],"categories":[]},{"title":"Hello World","date":"2023-06-07T00:16:18.933Z","path":"wiki/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]}],"categories":[],"tags":[]}